---
title: "CSC3107_Assignment_Seashell"
format: html
editor: visual
execute:
  echo: false
---

# 1. Introduction

## a. Background

The chosen visualization to critique is on the world's contribution to climate impact. The target news article is [here](https://edition.cnn.com/interactive/2023/12/us/countries-climate-change-emissions-cop28/).

The news article aims to convey the impacts if the current situation remains unchanged and the amount effort needed to be put in by specific countries to help cut climate pollution.

## b. Appreciated Aspects

1.  The use of a dynamic bubble chart to emphasise on rankings to visualise on the leading countries’ emission contributions in 2022
2.  The timeline graph shown in the visualization makes use of future predictions by 2030 to show the CO2 estimated emissions by country. The height of the charts albeit difficult to see due to the CSS, is to scale for their specific unit.
3.  The visualization uses different hues of the same red colour to describe the intensity of the data.

## c. Problematic Aspects

### i. Bubble Chart

1.  The chart does not provide a legend for the measurement metrics used. It is unclear what the size of the bubble represents.
2.  The chart does not provide a clear ranking of the top 20 countries’ emission contributions. It is hard to differentiate the mid-range sizes.

### ii. Horizontal Bar Chart

1.  It did not specify the type of emission that is required for reduction. Stating as total or per capita emission will convey different meaning of what action that country should take to reduce them. For instance, per capita will be revamping individuals lifestyle such as the current change of adopting EVs. Total will be introducing industry standard policies that affects industrial sectors like transportation.
2.  Horizontal bar chart shows misleading information that Nigeria should contribute more to the greenhouse gases emission. The red colour for both sides also contributes to the misled of information.

## d. Points for Improvement

1.  More numerical figures and labels could be used with the bubble chart and graphs to convey the content more effectively at a glance.
2.  A historical chart of the top countries contribution to climate impact can be shown thus identifying the actions taken by them to reduce global emissions.
3.  Provide a legend for the bubble chart to show the size of the bubble represents the amount of emissions.
4.  (Feedback)

-   Use world map to represent the data
-   Highlight top 10 (label countries)
-   Show 2 world maps to show current emission, and the other to show countries who should reduce emission in GHG

## e. Publicly Available Data

### i. Climate Watch Data

1.  Limited data till 2020 (able to filter by sectors contribution, gases, countries, etc): [Climate Watch Data](https://www.climatewatchdata.org/ghg-emissions?breakBy=sector&regions=BRN%2CKHM%2CIDN%2CLAO%2CMYS%2CMMR%2CPHL%2CSGP%2CTHA%2CVNM&sectors=agriculture%2Cbunker-fuels%2Cindustrial-processes%2Cland-use-change-and-forestry%2Cwaste%2Cenergy&source=Climate%20Watch)

### ii. Climate Action Tracker

1.  Able to filter by sector and various indicators, this video explains on the different tool provided. Limited data of Southeast Asia countries, can look into changing focus to worldwide contributors: [Climate Action Tracker](https://climateactiontracker.org/cat-data-explorer/sector-indicators/?sector=Transport%20Road&indicator=EV%20stock%20shares&country=SGP&country=IDN&country=PHL&scenario=benchmark&scenario=projected_current_policy&mode=countries)
2.  [GHG Emission Analysis](https://climateactiontracker.org/cat-data-explorer/country-emissions/)

### iii. Our World in Data

1.  [Github Bank](https://github.com/owid/co2-data?tafb=readme-ov-file)
2.  [Total GHG](https://ourworldindata.org/grapher/total-ghg-emissions?tab=table)
3.  [Per Capita GHG](https://ourworldindata.org/grapher/per-capita-ghg-emissions?tab=table)

### iv. EPA

1.  Interactive and various form to visualize data and charts: [EPA](https://www.epa.gov/ghgreporting/ghgrp-reported-data)

### v. The World Bank

1.  [Population Data](https://data.worldbank.org/indicator/SP.POP.TOTL?end=2022&start=2022&view=bar)

# 2. Data Collection and Preprocessing

## a. Import packages

```{r}
#| label: required-packages
#| echo: true
#| message: false
#| warning: false

library(ggplot2)
library(ggrepel)
library(ggtext)
library(htmltools)
library(rnaturalearth)
library(sf)
library(tidyverse)
library(scales)
library(mapview)
library(rmapshaper)
library(cowplot)
```

## b. View Data

### i. Reading of **Greenhouse Gas Emissions Per Capita Dataset**

```{r}
#| label: dataset-part-e-iii-3

# Read the CSV file
per_capita_ghg <- read.csv("per_capita_ghg_dataset.csv")

# Convert to tibble
per_capita_ghg <- as_tibble(per_capita_ghg)

print(per_capita_ghg)
```

### ii. Reading of **Total Greenhouse Gas Emission Analysis Dataset**

```{r}
#| label: dataset-part-e-ii-2

analysis_ghg <- read.csv("ghg_emission_analysis_dataset.csv")

analysis_ghg <- as_tibble(analysis_ghg)

print(analysis_ghg)
```

### iii. Reading of **Population From 1960 - 2022 Dataset**

```{r}
#| label: dataset-part-e-v-1

population <- read.csv("total_population_1960_2022.csv", skip=4)

population <- as_tibble(population)

print(population)
```

## c. Clean

### i. Remove NAs and renamed column from **Greenhouse Gas Emissions Per Capita Dataset**

```{r}
#| label: clean-dataset-i

# Rename the per capita emissions column
colnames(per_capita_ghg)[colnames(per_capita_ghg) == "Entity"] <- "country"
colnames(per_capita_ghg)[colnames(per_capita_ghg) == "Per.capita.greenhouse.gas.emissions.in.CO..equivalents"] <- "per_capita_ghg_emissions_t"
colnames(per_capita_ghg) <- tolower(colnames(per_capita_ghg))

# Remove NAs from per capita emissions column
per_capita_ghg_cleaned <- drop_na(per_capita_ghg, per_capita_ghg_emissions_t)

per_capita_ghg_cleaned
```

### ii. Rename column from **Total Population Dataset**

```{r}
#| label: clean-dataset-ii

colnames(population)[colnames(population) == "Country.Name"] <- "country"
colnames(population)[colnames(population) == "Country.Code"] <- "code"
colnames(population)[colnames(population) == "X2022"] <- "population"

print(population)
```

## d. Process

### i. Filter emissions happening in 2022 from **Greenhouse Gas Emissions Per Capita Dataset**

```{r}
#| label: process-dataset-i

per_capita_ghg_cleaned_2022 <- filter(per_capita_ghg_cleaned, year == 2022)
per_capita_ghg_cleaned_2022 <- mutate(per_capita_ghg_cleaned_2022, code = if_else(country == "European Union (27)", "EU27", code))

print(per_capita_ghg_cleaned_2022)
```

### ii. Filter projected reduction emission by 2030 to keep global temperature rise below 1.5°C from **Greenhouse Gas Emission Analysis Dataset**

```{r}
#| label: process-dataset-ii

analysis_ghg_projected_2030 <- filter(analysis_ghg, grepl("1.5", scenario), indicator == "Equity boundaries (absolute)", year == 2030)

analysis_ghg_projected_2030 <- analysis_ghg_projected_2030 %>%
  select(region, value) %>%
  mutate(value = value * 1000000) %>%
  rename(projected_ghg_emissions_t = value)

analysis_ghg_projected_2030
```

### iii. Filter population data for 2022 from **Total Population Dataset**

```{r}
#| label: process-dataset-iii

population_cleaned_2022 <- population %>%
  select(code, population)

population_cleaned_2022
```

### iv. Merge **Per Capita GHG 2022** and **Population 2022** datasets based on the country code

```{r}
#| label: process-dataset-iv

ghg_2022 <-
  left_join(per_capita_ghg_cleaned_2022, population_cleaned_2022, by = "code") |>
  select(country, code, per_capita_ghg_emissions_t, population)

ghg_2022
```

### v. Merge the **GHG 2022** and **Projected GHG 2030** datasets based on the country code

```{r}
#| label: process-dataset-v

ghg_2022_projected_2030 <- left_join(ghg_2022, analysis_ghg_projected_2030, by = c("code" = "region"))
ghg_2022_projected_2030 <-
  mutate(ghg_2022_projected_2030, country = case_when(
    country == "United States" ~ "United States of America",
    TRUE ~ country
  )) |>
  mutate(pc_projected_ghg_emissions_t = projected_ghg_emissions_t / population) |>
  select(country, code, per_capita_ghg_emissions_t, population, pc_projected_ghg_emissions_t)

ghg_2022_projected_2030
```

# 3. Visualization

## a. World Emission Chart using World Map

#### Previous Chart

-   Bubble chart by size to show the ranking of the countries ![Original Total Greenhouse Gas Emissions](original_chart/total_ghg_emissions_bbchart.png)

#### Improved Elements

-   Used world map to show the data
-   Used label to show the ranking of the countries
-   Used color palette to show the intensity of the data
-   Used Behrmann Projection (ESRI:54017) to accurately preserve the relative sizes of areas on the Earth’s surface

> **Note**: European Union is not a country, it is a political and economic union of 27 member states that are located primarily in Europe. The data has been broken up to show as individual state.

Ensure that the data obtained from open source is clean and free of any invalidity and inefficiencies by checking:

-   Spatial type validity

-   Number of geospatial data points is \< 10,000

```{r}
# Get world map data
world <- rnaturalearth::ne_countries(scale = "medium", returnclass = "sf")

# Check if the points in `world` are non-intersectting
all(st_is_valid(world))

# Check number of st features obtained from open source data
# Recommended to generally have 10,000 < geospatial data points
if(npts(world) >= 10000)
{
  print(sprintf("Reducing features on `world` for faster rendering from %d", npts(world)))
  world <- ms_simplify(world)
}
# Check number of features in world data
npts(world)
```

```{r}
# Define map projection
map_projection <- "ESRI:54017"

# Merge emissions data with world map
world <- left_join(world, ghg_2022_projected_2030, by = c("name" = "country"))
world <- st_transform(world, map_projection)

# Sort world data by per capita emissions
world_pc <- world %>%
  arrange(desc(per_capita_ghg_emissions_t)) %>%
  mutate(ranking = row_number())

# Create simplified dataframe
world_simplified <- world_pc %>%
  select(
    ranking, 
    name,
    code,
    geometry,
    per_capita_ghg_emissions_t, 
    pc_projected_ghg_emissions_t
  )
```

```{r}
# Top 10 Emitters
top_10 <- subset(world_simplified, ranking <= 10)

# Individual label offsets
label_offsets <- data.frame(
  country = top_10$name,
  offset_x = rep(0, nrow(top_10)),
  offset_y = rep(0, nrow(top_10))
)

# Merge offsets data
world_simplified <- left_join(world_simplified, label_offsets, by = c("name" = "country"))

# Extract centroid coordinates to offset labels
world_simplified <- world_simplified %>%
  mutate(centroid = st_centroid(geometry),
         x = st_coordinates(centroid)[,1],
         y = st_coordinates(centroid)[,2])
top_10 <- subset(world_simplified, ranking <= 10)
first_data_point <- top_10[1,]
```

```{r}
#| fig.height: 20
#| fig.width: 20

# Set colour palette, last of YlOrRd
bubble_color <- "#800026"

# Set seed to reproduce same settings
set.seed(1234567890)

# Define earth polygon
earth <- st_polygon(
  x = list(
    cbind(
      c(rep(-180, 181), rep(180, 181), -180), c(-90:90, 90:-90, -90)
    )
  )
) %>%
st_sfc() %>%
st_set_crs(4326) %>%
st_as_sf()

# Create choropleth map
main_map <- ggplot(data = world_simplified) +
  geom_sf(data = earth, fill = "lightblue") +
  geom_sf(
    aes(fill = per_capita_ghg_emissions_t), 
    color = "black", 
    size = 0.2
  ) +
  geom_label_repel(
    data = top_10,
    aes(
      x = x + offset_x,
      y = y + offset_y,
      label = sprintf("%d. %s", ranking, code)
    ),
    size = 3,
    box.padding = 0.7,
    point.padding = 0.5,
    max.overlaps = Inf,
    seed = 1234567890,
    fill = scales::alpha("white", 0.65),
    label.size = 0.1,
    fontface = "bold"
  ) +
  geom_point(
    data = filter(top_10, !is.na(pc_projected_ghg_emissions_t)),
    aes(
      x = x,
      y = y,
      size = pc_projected_ghg_emissions_t
    ),
    color = bubble_color,
    alpha = 0.5
  ) +
  scale_fill_fermenter(
    breaks = pretty_breaks(n = 8), 
    palette = "YlOrRd",
    direction = 1,
    name = "Per Capita GHG Emissions (t)"
  ) +
  scale_size(
    range = c(2.8, 10),
    name = "Projected Reduction (%)"
  ) +
  guides(
    fill = guide_colorbar(
      title.position = "top",
      title.hjust = 0.5,
      label.position = "bottom"
    ),
    size = guide_legend(
      title.position = "top",
      title.hjust = 0.5,
      label.position = "bottom"
    )
  ) +
  labs(
    title = "<b>2022 Per Capita GHG Emissions and 2030 Projected Reduction</b>", 
    subtitle = "<b>Top 10 Emitters in tonnes (t)</b>",
    caption = "Source: Our World in Data",
    x = NULL,
    y = NULL
  ) +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(), 
    panel.grid.minor = element_blank(),
    legend.frame = element_rect(),
    legend.text = element_text(size = 8.5),
    legend.title = element_text(size = 10),
    legend.position = "bottom",
    legend.key.width = unit(0.6, "cm"),
    legend.key.height = unit(0.6, "cm"),
    text = element_text(size = 12),
    plot.title = element_markdown(),
    plot.subtitle = element_markdown()
  )
```

```{r}
# Define the zoom factor and the first data point
zoom_factor <- 5
first_data_point <- top_10[1,]
zoom_to <- c(first_data_point$x, first_data_point$y)

# Calculate the spans in the Behrmann projection
C <- 40075016.686  # Circumference of the Earth in meters
x_span <- C / 2^zoom_factor
y_span <- C / 2^(zoom_factor + 1)

# Calculate bounds in the Behrmann projection
x_bounds <- c(zoom_to[1] - x_span / 2, zoom_to[1] + x_span / 2)
y_bounds <- c(zoom_to[2] - y_span / 2, zoom_to[2] + y_span / 2)

# Create the mini-map
mini_map <- ggplot() +
  geom_sf(data = earth, fill = "lightblue") +
  geom_sf(data = world_simplified, aes(fill = per_capita_ghg_emissions_t), 
          color = "black", 
          size = 0.2) +
  coord_sf(xlim = x_bounds, ylim = y_bounds, crs = map_projection) +
  geom_label(
    data = data.frame(
      x = zoom_to[1] - 0.095 * 100000,  # Adjust the offset to meters
      y = zoom_to[2] + 2.000 * 100000,
      label = sprintf("%d. %s", first_data_point$ranking, first_data_point$code)
    ),
    aes(x = x, y = y, label = label),
    size = 2.5,
    fill = scales::alpha("white", 0.65),
    label.size = 0.1,
    fontface = "bold"
  ) +
  scale_fill_fermenter(
    breaks = pretty_breaks(n = 9),
    palette = "YlOrRd",
    direction = 1
  ) +
  theme_void() +
  theme(
    text = element_text(size = 5),
    panel.border = element_rect(color = "black", fill = NA, linewidth = 1),
    plot.title = element_markdown(),
    plot.subtitle = element_markdown(),
    axis.text = element_blank(),
    axis.title = element_blank()
  ) +
  guides(
    fill = "none"
  )

# Combine the main map and the mini-map using cowplot
combined_plot <- cowplot::ggdraw(main_map) +
  cowplot::draw_plot(mini_map, x = 0.795, y = 0.315, width = 0.17, height = 0.090)

# Display the combined plot
combined_plot
```

